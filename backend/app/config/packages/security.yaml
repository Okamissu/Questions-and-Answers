security:
    password_hashers:
        App\Entity\User: 'auto'

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern:  ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            jwt: ~   # Lexik JWT bundle will handle token authentication

    access_control:
        # Admin-only rzeczy (np. edycja/usuwanie kategorii, tagów, userów)
        - { path: ^/api/categories, roles: ROLE_ADMIN, methods: [POST, PUT, DELETE] }
        - { path: ^/api/tags, roles: ROLE_ADMIN, methods: [POST, PUT, DELETE] }
        - { path: ^/api/users/\d+$, roles: ROLE_ADMIN, methods: [DELETE] }

        # Public
        - { path: ^/api/questions, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [GET] }
        - { path: ^/api/answers, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [GET, POST] }
        - { path: ^/api/users$, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [POST] }

        # Reszta – JWT wymagany
        - { path: ^/api, roles: ROLE_USER }


when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4
                time_cost: 3
                memory_cost: 10
